#include <stdio.h>
#include <stdlib.h>

/* Definition of a node in the linked list */
typedef struct listint_s {
    int data;
    struct listint_s *next;
} listint_t;

/* Function to check if the linked list has a cycle */
int check_cycle(listint_t *list) {
    listint_t *slow = list;
    listint_t *fast = list;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        
        /* If slow and fast pointers meet, there is a cycle */
        if (slow == fast) {
            return 1;
        }
    }

    /* If the loop completes, there is no cycle */
    return 0;
}

/* Test case to demonstrate the function */
int main() {
    /* Create a linked list with a cycle */
    listint_t *head = (listint_t*)malloc(sizeof(listint_t));
    head->data = 1;

    listint_t *node1 = (listint_t*)malloc(sizeof(listint_t));
    node1->data = 2;

    listint_t *node2 = (listint_t*)malloc(sizeof(listint_t));
    node2->data = 3;

    listint_t *node3 = (listint_t*)malloc(sizeof(listint_t));
    node3->data = 4;

    head->next = node1;
    node1->next = node2;
    node2->next = node3;
    node3->next = node1;  /* Create a cycle */

    /* Call the check_cycle function */
    int hasCycle = check_cycle(head);

    /* Print the result */
    if (hasCycle) {
        printf("The linked list has a cycle.\n");
    } else {
        printf("The linked list does not have a cycle.\n");
    }

    /* Free the memory allocated for the linked list */
    free(node3);
    free(node2);
    free(node1);
    free(head);

    return 0;
}

